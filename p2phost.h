/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package command-line-arguments */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h> /* for ptrdiff_t below */

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */


#line 3 "wrapper.go"



#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>

typedef struct idret {
	char *id;
	char *error;
} idret;

typedef struct addrsret {
	char **addrs;
	int size;
	char *error;
} addrsret;

typedef struct sendmsgret {
	char *msg;
	long long size;
	char *error;
} sendmsgret;

typedef sendmsgret* (*msghandler)(char*, char*, long long, char*);

extern char* StartWrp(int port, char *privkey);
extern idret* IDWrp();
extern addrsret* AddrsWrp();
extern char* CloseWrp();
extern char* ConnectWrp(char *nodeID, char **addrs, int size);
extern sendmsgret* SendMsgWrp(char *nodeID, char *msgid, char *msg, long long size);
extern char* RegisterHandlerWrp(char *msgType, void *handler);
extern char* UnregisterHandlerWrp(char *msgType);
extern void FreeString(void *ptr);
extern void FreeIDRet(idret *ptr);
extern void FreeAddrsRet(addrsret *ptr);
extern void FreeSendMsgRet(sendmsgret *ptr);
extern sendmsgret* CreateSendMsgRet(char *msg, long long size, char *err);

static char** makeCharArray(int size) {
	char **ret = (char**)malloc(sizeof(char*) * size);
	memset(ret, 0 , sizeof(char*) * size);
	return ret;
}

static void setArrayString(char **a, char *s, int n) {
    a[n] = s;
}

static void freeCharArray(char **a, int size) {
    int i;
    for (i = 0; i < size; i++) {
		free(a[i]);
		a[i] = NULL;
	}
    free(a);
}

static sendmsgret* executeHandler(msghandler handler, char *msgType, char *data, long long size, char *pubkey) {
	return (*handler)(msgType, data, size, pubkey);
}

//以下为测试用代码
static sendmsgret* msgprocessor(char* msgType, char* data, long long size, char* pubkey) {
	printf("Type: %s\n", msgType);
	printf("Pubkey: %s\n", pubkey);
	for (int i=0; i<size; i++) {
		    printf("%c", data[i]);
	}
	puts("\n");
	char *retdata = (char*)malloc(sizeof(char) * (size + 5));
	strncpy(retdata, data, size);
	strncpy(retdata+size, ": ack", 5);
	sendmsgret *ret = CreateSendMsgRet(retdata, size + 5, NULL);
	return ret;
}

static void sstart() {
 	int port = 7999;
 	char *privkey = "16Uiu2HAmPR1qWUmFLatKf8QmHtJ3fkQpjP4tSa99wYbWvcvkzwYw";
	char *err = StartWrp(port, privkey);
	if (err != NULL) {
		printf("error: %s\n", err);
		free(err);
		err = NULL;
		return;
	}

	idret *retp = IDWrp();
	if (retp->error != NULL) {
		printf("Error: %s\n", retp->error);
		free(retp->error);
		free(retp);
		retp = NULL;
		return;
	}
	printf("ID: %s\n", retp->id);
	FreeIDRet(retp);
	retp = NULL;

	addrsret *retp2 = AddrsWrp();
	if (retp2->error != NULL) {
		printf("Error: %s\n", retp2->error);
		FreeAddrsRet(retp2);
		return;
	}
	for (int i=0; i<retp2->size; i++) {
		printf("Addr%d: %s\n", i, (retp2->addrs)[i]);
	}
	FreeAddrsRet(retp2);

	char* error = RegisterHandlerWrp("test", &msgprocessor);
	if (err != NULL) {
		printf("error: %s\n", err);
		free(err);
		err = NULL;
		return;
	}

	//CloseWrp();
	while(1)
		sleep(10000);
	printf("server end!!!!!");
}

static void cstart() {
	int port = 9998;
 	char *privkey = "16Uiu2HAmPR1qWUmFLatKf8QmHtJ3fkQpjP4tSa99wYbWvcvkzwYw";
	char *err = StartWrp(port, privkey);
	if (err != NULL) {
		printf("error: %s\n", err);
		free(err);
		err = NULL;
		return;
	}

	idret *retp = IDWrp();
	if (retp->error != NULL) {
		printf("Error: %s\n", retp->error);
		free(retp->error);
		free(retp);
		retp = NULL;
		return;
	}
	printf("ID: %s\n", retp->id);
	FreeIDRet(retp);
	retp = NULL;

	addrsret *retp2 = AddrsWrp();
	if (retp2->error != NULL) {
		printf("Error: %s\n", retp2->error);
		FreeAddrsRet(retp2);
		return;
	}
	for (int i=0; i<retp2->size; i++) {
		printf("Addr%d: %s\n", i, (retp2->addrs)[i]);
	}
	FreeAddrsRet(retp2);

	char *addrs[1] = {"/ip4/127.0.0.1/tcp/7999"};
	err = ConnectWrp("16Uiu2HAmPR1qWUmFLatKf8QmHtJ3fkQpjP4tSa99wYbWvcvkzwYw", addrs, 1);
	if (err != NULL) {
		printf("error: %s\n", err);
		free(err);
		err = NULL;
		return;
	}

	char data[12] = {'s','e','n','d',' ','m','e','s','s','a','g','e'};
	char msid[2] ;
	msid[0] = 0;
	msid[1] = 0;
	sendmsgret* retp3 = SendMsgWrp("16Uiu2HAmPR1qWUmFLatKf8QmHtJ3fkQpjP4tSa99wYbWvcvkzwYw", msid, data, 12);
	if (retp3->error != NULL) {
		printf("error: %s\n", retp3->error);
		FreeSendMsgRet(retp3);
		return;
	}
	puts("Received: ");
	for (int i=0; i<retp3->size; i++) {
		printf("%c", (retp3->msg)[i]);
	}
	puts("\n");
	CloseWrp();
}

#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef __SIZE_TYPE__ GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif


extern char* StartWrp(int p0, char* p1);

extern idret* IDWrp();

extern addrsret* AddrsWrp();

extern char* CloseWrp();

extern char* ConnectWrp(char* p0, char** p1, int p2);

extern char* DisconnectWrp(char* p0);

extern sendmsgret* SendMsgWrp(char* p0, char* p1, char* p2, long long int p3);

extern char* RegisterHandlerWrp(char* p0, void* p1);

extern char* UnregisterHandlerWrp(char* p0);

extern void FreeString(void* p0);

extern void FreeIDRet(idret* p0);

extern void FreeAddrsRet(addrsret* p0);

extern void FreeSendMsgRet(sendmsgret* p0);

extern idret* CreateIDRet(char* p0, char* p1);

extern addrsret* CreateAddrsRet(char** p0, int p1, char* p2);

extern sendmsgret* CreateSendMsgRet(char* p0, long long int p1, char* p2);

extern sendmsgret* CreateSendMsgRet2(char* p0, long long int p1, char* p2);

#ifdef __cplusplus
}
#endif
